package com.lanjieqiu.demo;
import java.awt.Point;
public class DanZi {
    private boolean upFlg;
    private boolean downFlg;
    private boolean leftMoveFlg;
    private boolean rightMoveFlg;
    private Point point;
    /**     * @return upFlg     */    public boolean isUpFlg() {        return upFlg;    }
    /**     * @param upFlg     *            設定する upFlg     */    public void setUpFlg(boolean upFlg) {        this.upFlg = upFlg;    }
    /**     * @return downFlg     */    public boolean isDownFlg() {        return downFlg;    }
    /**     * @param downFlg     *            設定する downFlg     */    public void setDownFlg(boolean downFlg) {        this.downFlg = downFlg;    }
    /**     * @return leftMoveFlg     */    public boolean isLeftMoveFlg() {        return leftMoveFlg;    }
    /**     * @param leftMoveFlg     *            設定する leftMoveFlg     */    public void setLeftMoveFlg(boolean leftMoveFlg) {        this.leftMoveFlg = leftMoveFlg;    }
    /**     * @return reightMoveFlg     */    public boolean isRightMoveFlg() {        return rightMoveFlg;    }
    /**     * @param rightMoveFlg     *            設定する rightMoveFlg     */    public void setRightMoveFlg(boolean rightMoveFlg) {        this.rightMoveFlg = rightMoveFlg;    }
    /**     * @return point     */    public Point getPoint() {        return point;    }
    /**     * @param point     *            設定する point     */    public void setPoint(Point point) {        this.point = point;    }
}



package com.lanjieqiu.demo;
import java.util.ArrayList;import java.util.List;
public class LanJieBan {
    private List<LanJieKuai> lanjieLst = new ArrayList<>();        private boolean moveFlg;        private int moveDirection;
    /**     * @return lanjieLst     */    public List<LanJieKuai> getLanjieLst() {        return lanjieLst;    }
    /**     * @param lanjieKuai 設定する lanjieKuai     */    public void addLanjieLst(LanJieKuai lanjieKuai) {        this.lanjieLst.add(lanjieKuai);    }
    /**     * @return moveFlg     */    public boolean isMoveFlg() {        return moveFlg;    }
    /**     * @param moveFlg 設定する moveFlg     */    public void setMoveFlg(boolean moveFlg) {        this.moveFlg = moveFlg;    }
    /**     * @return moveDirection     */    public int getMoveDirection() {        return moveDirection;    }
    /**     * @param moveDirection 設定する moveDirection     */    public void setMoveDirection(int moveDirection) {        this.moveDirection = moveDirection;    }}
    
    
 package com.lanjieqiu.demo;
import java.awt.Point;
public class LanJieKuai {
    private Point point;
    /**     * @return point     */    public Point getPoint() {        return point;    }
    /**     * @param point 設定する point     */    public void setPoint(Point point) {        this.point = point;    }    }
    
    
    
  package com.lanjieqiu.demo;
import java.awt.GridBagConstraints;import java.awt.GridBagLayout;import java.awt.Insets;import java.awt.Point;
import javax.swing.JFrame;import javax.swing.JPanel;import javax.swing.SwingUtilities;
public class LanJieQiuFrame  extends JFrame{    /**     *      */    private static final long serialVersionUID = 1L;    public LanJieQiuFrame(){        setVisible(true);        setTitle("拦截球");        setLocationRelativeTo(null);        setSize(500, 500);        setDefaultCloseOperation(DISPOSE_ON_CLOSE);        setLayout( new GridBagLayout() );                LanJieBan lanJieBanl = new LanJieBan();        DanZi danZi = new DanZi();        init(lanJieBanl,danZi);        QiuPan qiuPan = new QiuPan(lanJieBanl,danZi);        add(new JPanel(), new GridBagConstraints(0, 0, 1, 1, 0.1, 0.1, GridBagConstraints.CENTER,                GridBagConstraints.BOTH, new Insets(0, 0, 0, 0), 0, 0));
        add(qiuPan, new GridBagConstraints(0, 1, 1, 1, 0.8, 0.8, GridBagConstraints.CENTER, GridBagConstraints.NONE,                new Insets(0, 0, 0, 0), 0, 0));                add(new JPanel(), new GridBagConstraints(0, 2, 1, 1, 0.1, 0.1, GridBagConstraints.CENTER,                GridBagConstraints.NONE, new Insets(0, 0, 30, 0), 0, 0));        addKeyListener(new MoveBallListener(lanJieBanl));    }        private void init(LanJieBan lanJieBanl, DanZi danZi) {        for (int i = 0; i < 5; i++) {            LanJieKuai lanJieKuai = new LanJieKuai();            lanJieKuai.setPoint(new Point((i + 14) * 10, 250));            lanJieBanl.addLanjieLst(lanJieKuai);        }        danZi.setDownFlg(false);        danZi.setUpFlg(true);        danZi.setPoint(new Point(160, 240));    }        public static void main(String[] args) {        SwingUtilities.invokeLater(new Runnable() {            @Override            public void run() {                new LanJieQiuFrame();            }        });    }}
        
   
  package com.lanjieqiu.demo;
import java.awt.Point;import java.awt.event.KeyAdapter;import java.awt.event.KeyEvent;import java.util.List;
public class MoveBallListener  extends KeyAdapter {        private LanJieBan lanJieBan;        public MoveBallListener(LanJieBan lanJieBan) {        this.lanJieBan = lanJieBan;    }        @Override    public void keyPressed(KeyEvent e) {        int keyNum = e.getKeyCode();        if (!lanJieBan.isMoveFlg()) {            lanJieBan.setMoveFlg(true);        }        if (keyNum == 37 || keyNum == 65) {            // ← 又 A            lanJieBan.setMoveDirection(1);            List<LanJieKuai> lanjieLst = lanJieBan.getLanjieLst();            LanJieKuai lanJieKuai = lanjieLst.get(0);            int x = lanJieKuai.getPoint().x - 10;            if (x <= -10) {                return;            }            Point point = lanJieKuai.getPoint();            Point tempPoint = null;            lanJieKuai.setPoint(new Point(x, lanJieKuai.getPoint().y));            for (int i = 1; i < lanjieLst.size(); i++) {                lanJieKuai = lanjieLst.get(i);                tempPoint = lanJieKuai.getPoint();                lanJieKuai.setPoint(point);                point = tempPoint;            }        } else if (keyNum == 39 || keyNum == 68) {            // → 又 D            lanJieBan.setMoveDirection(2);            List<LanJieKuai> lanjieLst = lanJieBan.getLanjieLst();            LanJieKuai lanJieKuai = lanjieLst.get(lanjieLst.size() - 1);            int x = lanJieKuai.getPoint().x + 10;            if (x >= 300) {                return;            }            Point point = lanJieKuai.getPoint();            Point tempPoint = null;            lanJieKuai.setPoint(new Point(x, lanJieKuai.getPoint().y));            for (int i = lanjieLst.size() - 2; i > -1; i--) {                lanJieKuai = lanjieLst.get(i);                tempPoint = lanJieKuai.getPoint();                lanJieKuai.setPoint(point);                point = tempPoint;            }        }    }
    @Override    public void keyReleased(KeyEvent e) {        lanJieBan.setMoveDirection(0);    }            }
    
    
    
    package com.lanjieqiu.demo;
import java.awt.Color;import java.awt.Dimension;import java.awt.Graphics;import java.awt.Point;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.ArrayList;import java.util.Iterator;import java.util.List;
import javax.swing.JPanel;import javax.swing.Timer;
public class QiuPan extends JPanel {
    /**     *      */    private static final long serialVersionUID = 1L;        private Timer timer;        private int score;        private boolean initFlg = true;        private int qiuMoveY = 120;        private int qiuMoveX = 0;        private LanJieBan lanJieBanl;        private DanZi danZi;        private int delay = 10; // every 1 second        private List<String> points = new ArrayList<String>();        private boolean randomFlg = true;
    public QiuPan(LanJieBan lanJieBanl,DanZi danZi) {        this.lanJieBanl = lanJieBanl;        this.danZi = danZi;        setBackground(Color.gray);        setPreferredSize(new Dimension(300, 300));        start();    }        @Override    public void paintComponent(Graphics g) {        super.paintComponent(g);        if (initFlg) {            initPaint(g);            if (randomFlg) {                lanjieKuaiPoint();            }            randomKuaiPaint(g);        }        if (lanJieBanl.isMoveFlg()) {            initFlg = false;            randomKuaiPaint(g);            movePaint(g);        }    }        private void initPaint(Graphics g) {        List<LanJieKuai> lanjieLst = lanJieBanl.getLanjieLst();        for (LanJieKuai lanJieKuai : lanjieLst) {            g.setColor(Color.WHITE);            g.drawRect(lanJieKuai.getPoint().x, lanJieKuai.getPoint().y, 10, 10);            g.setColor(Color.BLACK);            g.fillRect(lanJieKuai.getPoint().x + 1, lanJieKuai.getPoint().y + 1, 9, 9);        }                g.setColor(Color.WHITE);        g.drawRect(danZi.getPoint().x, danZi.getPoint().y, 10, 10);        g.setColor(Color.BLACK);        g.fillRect(danZi.getPoint().x + 1, danZi.getPoint().y + 1, 9, 9);    }        private void lanjieKuaiPoint() {        int shuLiang = (int) (Math.random() * 30) + 10;        for (int j = 0; j < 3; j++) {            for (int i = 0; i < shuLiang; i++) {                int xPoint = ((int) (Math.random() * 300) / 10) * 10;                String pointKey = xPoint + "," + (j + 1) * 8;                if (points.contains(pointKey)) {                    continue;                }                points.add(pointKey);            }        }        randomFlg = false;    }        private void randomKuaiPaint(Graphics g) {        for (String pointKey : points) {            String[] point = pointKey.split(",");            g.setColor(Color.WHITE);            g.drawRect(Integer.parseInt(point[0]), Integer.parseInt(point[1]), 10, 10);            g.setColor(Color.BLACK);            g.fillRect(Integer.parseInt(point[0]) + 1, Integer.parseInt(point[1]) + 1, 9, 9);        }    }        private void movePaint(Graphics g) {        boolean failedFlg = true;        List<LanJieKuai> lanjieLst = lanJieBanl.getLanjieLst();        for (LanJieKuai lanJieKuai : lanjieLst) {            g.setColor(Color.WHITE);            g.drawRect(lanJieKuai.getPoint().x, lanJieKuai.getPoint().y, 10, 10);            g.setColor(Color.BLACK);            g.fillRect(lanJieKuai.getPoint().x + 1, lanJieKuai.getPoint().y + 1, 9, 9);        }        if (danZi.getPoint().y == 240) {            for (LanJieKuai lanJieKuai : lanJieBanl.getLanjieLst()) {                if (danZi.getPoint().x == lanJieKuai.getPoint().x || danZi.getPoint().x == lanJieKuai.getPoint().x + 10                        || danZi.getPoint().x == lanJieKuai.getPoint().x - 10) {                    failedFlg = false;                    danZi.setUpFlg(true);                    danZi.setDownFlg(false);                    if (lanJieBanl.getMoveDirection() == 1) {                        danZi.setRightMoveFlg(false);                        danZi.setLeftMoveFlg(true);                        break;                    } else if (lanJieBanl.getMoveDirection() == 2) {                        danZi.setRightMoveFlg(true);                        danZi.setLeftMoveFlg(false);                        break;                    } else {                        break;                    }                }            }        }
        if ((danZi.getPoint().y == 240 && failedFlg) || danZi.getPoint().y > 240) {            initPaint(g);            end();            return;        }
        if (danZi.isUpFlg()) {            qiuMoveY = qiuMoveY - 8;            if (qiuMoveY <= 0) {                qiuMoveY = 0;            }        }        if (danZi.isDownFlg()) {            qiuMoveY = qiuMoveY + 8;            if (qiuMoveY >= 240) {                qiuMoveY = 240;            }        }
        if (danZi.isLeftMoveFlg()) {            qiuMoveX = qiuMoveX - 10;            if (qiuMoveX <= 0) {                qiuMoveX = 0;            }        }
        if (danZi.isRightMoveFlg()) {            qiuMoveX = qiuMoveX + 10;            if (qiuMoveX >= 300) {                qiuMoveX = 290;            }        }
        if (qiuMoveX == 0) {            danZi.setRightMoveFlg(true);            danZi.setLeftMoveFlg(false);        }
        if (qiuMoveX == 290) {            danZi.setRightMoveFlg(false);            danZi.setLeftMoveFlg(true);        }
        if (qiuMoveY == 0) {            danZi.setUpFlg(false);            danZi.setDownFlg(true);        }
        if (qiuMoveY <= 32) {            Iterator<String> iterator = points.iterator();            while (iterator.hasNext()) {                String[] point = iterator.next().split(",");                int xPoint = Integer.parseInt(point[0]);                int yPoint = Integer.parseInt(point[1]);                if (xPoint == qiuMoveX + 10 && yPoint == qiuMoveY + 8) {                    iterator.remove();                    danZi.setRightMoveFlg(false);                    danZi.setLeftMoveFlg(true);                    danZi.setUpFlg(true);                    danZi.setDownFlg(false);                    break;                }
                if (xPoint == qiuMoveX + 10 && yPoint == qiuMoveY) {                    iterator.remove();                    danZi.setRightMoveFlg(false);                    danZi.setLeftMoveFlg(true);                    danZi.setUpFlg(false);                    danZi.setDownFlg(false);                    break;                }
                if (xPoint == qiuMoveX + 10 && yPoint == qiuMoveY - 8) {                    iterator.remove();                    danZi.setRightMoveFlg(false);                    danZi.setLeftMoveFlg(true);                    danZi.setUpFlg(false);                    danZi.setDownFlg(true);                    break;                }
                if (xPoint == qiuMoveX && yPoint == qiuMoveY + 8) {                    iterator.remove();                    danZi.setRightMoveFlg(false);                    danZi.setLeftMoveFlg(false);                    danZi.setUpFlg(true);                    danZi.setDownFlg(false);                    break;                }                if (xPoint == qiuMoveX && yPoint == qiuMoveY - 8) {                    iterator.remove();                    danZi.setRightMoveFlg(false);                    danZi.setLeftMoveFlg(false);                    danZi.setUpFlg(false);                    danZi.setDownFlg(true);                    break;                }
                if (xPoint == qiuMoveX - 10 && yPoint == qiuMoveY - 8) {                    iterator.remove();                    danZi.setRightMoveFlg(true);                    danZi.setLeftMoveFlg(false);                    danZi.setUpFlg(true);                    danZi.setDownFlg(false);                    break;                }
                if (xPoint == qiuMoveX - 10 && yPoint == qiuMoveY) {                    iterator.remove();                    danZi.setRightMoveFlg(true);                    danZi.setLeftMoveFlg(false);                    danZi.setUpFlg(false);                    danZi.setDownFlg(false);                    break;                }
                if (xPoint == qiuMoveX - 10 && yPoint == qiuMoveY + 8) {                    iterator.remove();                    danZi.setRightMoveFlg(true);                    danZi.setLeftMoveFlg(false);                    danZi.setUpFlg(false);                    danZi.setDownFlg(true);                    break;                }            }        }
        danZi.setPoint(new Point(qiuMoveX, qiuMoveY));        g.setColor(Color.WHITE);        g.drawRect(qiuMoveX, qiuMoveY, 10, 10);        g.setColor(Color.BLACK);        g.fillRect(qiuMoveX + 1, qiuMoveY + 1, 9, 9);    }        private void start() {        ActionListener action = new ActionListener() {            @Override            public void actionPerformed(ActionEvent event) {                if (score > 1000) {                    end();                }                repaint();                score ++;            }        };        timer = new Timer(delay, action);        timer.setInitialDelay(0);        timer.start();    }        private void end() {         timer.stop();    }}
