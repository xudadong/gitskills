package com.taiqiu.demo;
import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.KeyAdapter;import java.awt.event.KeyEvent;
import javax.swing.Timer;
public class KeyListenerForPoolCue extends KeyAdapter {
    private PoolCue poolCue;    private boolean spaceKeyKeepFlg = false;        private  Timer timer;    public KeyListenerForPoolCue(PoolCue poolCue) {        this.poolCue = poolCue;    }
    @Override    public void keyPressed(KeyEvent e) {
        int keyNum = e.getKeyCode();        if (keyNum == KeyEvent.VK_SPACE) {            spaceKeyKeepFlg = true;            poolCue.setHitFlg(true);            timer = new Timer(10, new ActionListener() {                @Override                public void actionPerformed(ActionEvent e1) {                    double radiusX = poolCue.getPointX();                    double radiusY = poolCue.getPointY();                    if (radiusY == poolCue.getDefaultPointY() + 15) {                        poolCue.setReturnFlg(true);                    }                    if (poolCue.isReturnFlg()) {                        if (radiusY == poolCue.getDefaultPointY() + 30) {                            spaceKeyKeepFlg = false;                            poolCue.setReturnFlg(false);                            timer.stop();                            return;                        }                        radiusY++;                    } else {                        radiusY--;                    }                    poolCue.setPointX(radiusX);                    poolCue.setPointY(radiusY);                    TaiQiuFrame jcomponent = (TaiQiuFrame) e.getSource();                    jcomponent.repaintJpanel();                }            });            timer.setRepeats(true);            timer.setCoalesce(true);            timer.start();        }        if (!spaceKeyKeepFlg) {            double angle = poolCue.getAngle();            TaiQiuFrame jcomponent = (TaiQiuFrame) e.getSource();            if (keyNum == 38 || keyNum == 87 || keyNum == 37 || keyNum == 65) {                angle = angle + 1;            } else if (keyNum == 40 || keyNum == 83 || keyNum == 39 || keyNum == 68) {                angle = angle - 1;            }            poolCue.setAngle(angle);            jcomponent.repaintJpanel();        }    }
    /*     * (非 Javadoc)     *      * @see java.awt.event.KeyAdapter#keyReleased(java.awt.event.KeyEvent)     */    @Override    public void keyReleased(KeyEvent e) {        int keyNum = e.getKeyCode();        if(keyNum == KeyEvent.VK_SPACE) {        }    }
}



package com.taiqiu.demo;
public class PoolCue {    private double angle;        private double pointX;        private double pointY;        private double baiQiuCenterX;        private double baiQiuCenterY;        private boolean hitFlg;        private double hitPower;        private double defaultPointX;        private double defaultPointY;            private boolean returnFlg;
    /**     * @return angle     */    public double getAngle() {        return angle;    }
    /**     * @param angle 設定する angle     */    public void setAngle(double angle) {        this.angle = angle;    }
    /**     * @return pointX     */    public double getPointX() {        return pointX;    }
    /**     * @param pointX 設定する pointX     */    public void setPointX(double pointX) {        this.pointX = pointX;    }
    /**     * @return pointY     */    public double getPointY() {        return pointY;    }
    /**     * @param pointY 設定する pointY     */    public void setPointY(double pointY) {        this.pointY = pointY;    }
    /**     * @return baiQiuCenterX     */    public double getBaiQiuCenterX() {        return baiQiuCenterX;    }
    /**     * @param baiQiuCenterX 設定する baiQiuCenterX     */    public void setBaiQiuCenterX(double baiQiuCenterX) {        this.baiQiuCenterX = baiQiuCenterX;    }
    /**     * @return baiQiuCenterY     */    public double getBaiQiuCenterY() {        return baiQiuCenterY;    }
    /**     * @param baiQiuCenterY 設定する baiQiuCenterY     */    public void setBaiQiuCenterY(double baiQiuCenterY) {        this.baiQiuCenterY = baiQiuCenterY;    }
    /**     * @return hitFlg     */    public boolean isHitFlg() {        return hitFlg;    }
    /**     * @param hitFlg 設定する hitFlg     */    public void setHitFlg(boolean hitFlg) {        this.hitFlg = hitFlg;    }
    /**     * @return hitPower     */    public double getHitPower() {        return hitPower;    }
    /**     * @param hitPower 設定する hitPower     */    public void setHitPower(double hitPower) {        this.hitPower = hitPower;    }
    /**     * @return defaultPointX     */    public double getDefaultPointX() {        return defaultPointX;    }
    /**     * @param defaultPointX 設定する defaultPointX     */    public void setDefaultPointX(double defaultPointX) {        this.defaultPointX = defaultPointX;    }
    /**     * @return defaultPointY     */    public double getDefaultPointY() {        return defaultPointY;    }
    /**     * @param defaultPointY 設定する defaultPointY     */    public void setDefaultPointY(double defaultPointY) {        this.defaultPointY = defaultPointY;    }
    /**     * @return returnFlg     */    public boolean isReturnFlg() {        return returnFlg;    }
    /**     * @param returnFlg 設定する returnFlg     */    public void setReturnFlg(boolean returnFlg) {        this.returnFlg = returnFlg;    }    }
    
    

package com.taiqiu.demo;
import java.awt.Color;import java.awt.Dimension;import java.awt.Font;import java.awt.Graphics;import java.awt.Graphics2D;import java.awt.RenderingHints;import java.awt.Shape;import java.awt.font.GlyphVector;import java.awt.geom.AffineTransform;import java.awt.geom.Arc2D;import java.awt.geom.Area;import java.awt.geom.Ellipse2D;import java.awt.geom.Point2D;import java.awt.geom.Rectangle2D;import java.util.ArrayList;import java.util.List;import java.util.Random;
import javax.swing.JPanel;
public class QiuTai extends JPanel {
    /**     *      */    private static final long serialVersionUID = 1L;        private boolean initFlg = true;
    private List<TaiQiu> taiqiuLst = new ArrayList<>();    private PoolCue poolCue;    public QiuTai(PoolCue poolCue) {        setBackground(null);        this.poolCue = poolCue;        setPreferredSize(new Dimension(500, 500));    }
    @Override    protected void paintComponent(Graphics g) {        super.paintComponent(g);        Graphics2D g2d = (Graphics2D) g;        g2d.setColor(Color.GRAY);        g2d.fillRect(15, 15, 370, 470);        g2d.fill(new Arc2D.Float(5, 5, 50, 50, 90, 360, Arc2D.PIE));        g2d.setColor(Color.BLACK);        g2d.fill(new Arc2D.Double(12.5, 12.5, 35, 35, 90, 360, Arc2D.PIE));        g2d.setColor(Color.GRAY);        g2d.fill(new Arc2D.Float(345, 5, 50, 50, 90, 360, Arc2D.PIE));        g2d.setColor(Color.BLACK);        g2d.fill(new Arc2D.Double(352.5, 12.5, 35, 35, 90, 360, Arc2D.PIE));        g2d.setColor(Color.GRAY);        g2d.fill(new Arc2D.Float(5, 445, 50, 50, 90, 360, Arc2D.PIE));        g2d.setColor(Color.BLACK);        g2d.fill(new Arc2D.Double(12.5, 452.5, 35, 35, 90, 360, Arc2D.PIE));        g2d.setColor(Color.GRAY);        g2d.fill(new Arc2D.Float(345, 445, 50, 50, 90, 360, Arc2D.PIE));        g2d.setColor(Color.BLACK);        g2d.fill(new Arc2D.Double(352.5, 452.5, 35, 35, 90, 360, Arc2D.PIE));
        if (initFlg) {            // 白球            initBall(200, 410, null);            initAllBalls();            initFlg = false;        }                paintBalls(g2d);                paintPoolCue(g2d);    }
    private void paintPoolCue(Graphics2D g2d) {        g2d.setColor(Color.BLACK);        AffineTransform transform = new AffineTransform();        Rectangle2D rect = new Rectangle2D.Double(poolCue.getPointX(), poolCue.getPointY(), 6, 20);// 创建矩形对象        // 绘制椭圆        Ellipse2D ellipse = new Ellipse2D.Double();// 创建椭圆对象        double recCenterX = rect.getCenterX();// 定义圆心坐标（以矩形的中心为圆心）        double topY = rect.getCenterY()-10;        ellipse.setFrameFromCenter(recCenterX, topY, recCenterX + 3, topY + 3 / 1.5);// 设置圆形的绘制框架（4个参数表示中心点坐标和角点坐标）        // 绘制圆        Ellipse2D circle = new Ellipse2D.Double();        circle.setFrameFromCenter(recCenterX, topY + 20, recCenterX + 3, topY + 20 + 3 / 1.5);// 设置圆形的绘制框架（4个参数表示中心点坐标和角点坐标）        transform.rotate(Math.PI * poolCue.getAngle() / 180, poolCue.getBaiQiuCenterX(), poolCue.getBaiQiuCenterY());        g2d.setTransform(transform);        g2d.draw(rect);// 将矩形对象绘制于Panel面板上        g2d.fill(ellipse);// 将椭圆对象绘制于Panel面板上        g2d.fill(circle);// 将圆形对象绘制于Panel面板上    }        private void initBall(double radiusX,double radiusY,String ballNumber) {        TaiQiu taiQiu = new TaiQiu();        taiQiu.setCenterX(radiusX);        taiQiu.setCenterY(radiusY);        taiQiu.setBallNumber(ballNumber);        taiQiu.setAngle(0.0);        taiQiu.setSpeed(0.0);        taiQiu.setEdge1Rotate(-20.0);        taiQiu.setBallRotate(0.0);        taiQiu.setEdge2Rotate(20.0);        Color color = new Color(0,0,0,255);        if (ballNumber == null || ballNumber.equals("")) {            color = new Color(255, 255, 255, 255);            poolCue.setBaiQiuCenterX(radiusX);            poolCue.setBaiQiuCenterY(radiusY);            poolCue.setDefaultPointX(radiusX);            poolCue.setDefaultPointY(radiusY);            poolCue.setPointX(poolCue.getBaiQiuCenterX() - 6 / 2);            poolCue.setPointY(poolCue.getBaiQiuCenterY() + 30);        } else if (ballNumber.equals("1") || ballNumber.equals("9")) {            color = new Color(255, 255, 0, 255);        } else if (ballNumber.equals("2") || ballNumber.equals("10")) {            color = new Color(13, 51, 255, 255);        } else if (ballNumber.equals("3") || ballNumber.equals("11")) {            color = new Color(220, 20, 60, 255);        } else if (ballNumber.equals("4") || ballNumber.equals("12")) {            color = new Color(116, 0, 161, 255);        } else if (ballNumber.equals("5") || ballNumber.equals("13")) {            color = new Color(242, 133, 0, 255);        } else if (ballNumber.equals("6") || ballNumber.equals("14")) {            color = new Color(22, 152, 43, 255);        } else if (ballNumber.equals("7") || ballNumber.equals("15")) {            color = new Color(128, 64, 0, 255);        } else if (ballNumber.equals("8")) {            color = new Color(0, 0, 0, 255);        }        taiQiu.setColor(color);        taiqiuLst.add(taiQiu);    }            private void initAllBalls() {        double math = 15 * Math.sqrt(3);        double radiusX = 200;        List<Integer> ballNumbers = new ArrayList<>();        for (int i = 0; i < 5; i++) {            double half = (i + 1) / 2.0;            int percent = (i + 1) % 2;
            if (percent != 0) {                double radiusY = (250 + (5 - i) * math - 3 * math);                for (int j = 1; j < half; j++) {                    radiusX = 200 + (-30 * (j + 1) + 30);                    String ballNumber = String.valueOf(checkBallNumber(ballNumbers));                    initBall(radiusX, radiusY, ballNumber);                }                int k = 0;                for (int j = (i + 1); j > (i + 1) - half; j--) {                    radiusX = 200 + (30 * (k + 1) - 30);                    String ballNumber = String.valueOf(checkBallNumber(ballNumbers));                    initBall(radiusX, radiusY, ballNumber);                    k++;                }            } else {                int radiusY = (int) (250 + (5 - i) * math - 3 * math);                for (int j = 0; j < half; j++) {                    radiusX = 200 + (-30 * (j + 1) + 15);                    String ballNumber = String.valueOf(checkBallNumber(ballNumbers));                    initBall(radiusX, radiusY, ballNumber);                }                int k = 0;                for (int j = (i + 1); j > (i + 1) - half; j--) {                    radiusX = 200 + (30 * (k + 1) - 15);                    String ballNumber = String.valueOf(checkBallNumber(ballNumbers));                    initBall(radiusX, radiusY, ballNumber);                    k++;                }            }        }    }            private int checkBallNumber(List<Integer> ballNumbers) {        Random ran = new Random();        int ballNumber = ran.nextInt(15)+1;        if (ballNumbers.contains(ballNumber)) {            return checkBallNumber(ballNumbers);        } else {            ballNumbers.add(ballNumber);            return ballNumber;        }    }        private void paintBalls(Graphics2D g2d) {        for (TaiQiu taiQiu : taiqiuLst) {            ballPaint(g2d, taiQiu);        }    }        private void ballPaint(Graphics2D g2d,TaiQiu taiQiu) {        double x = taiQiu.getCenterX();        double y = taiQiu.getCenterY();        double radius = 15;// 定义圆的半径        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);        g2d.setColor(taiQiu.getColor());        Ellipse2D circle = new Ellipse2D.Double();        circle.setFrameFromCenter(x, y, x - radius, y - radius);// 设置圆形的绘制框架（4个参数表示中心点坐标和角点坐标）        g2d.fill(circle);// 将圆形对象绘制于Panel面板上        String ballNumber = taiQiu.getBallNumber();        if (ballNumber == null || ballNumber.equals("")) {        } else {            Shape centerShape = centerPaint(taiQiu);            Area ballShape = new Area(circle);            ballShape.intersect(new Area(centerShape));            g2d.setColor(Color.WHITE);            g2d.fill(ballShape);                        g2d.setColor(Color.WHITE);            if (Integer.parseInt(ballNumber) > 8) {                // 辺の絵                edgeBall(g2d, circle,taiQiu);            }        }    }        private Shape centerPaint(TaiQiu taiQiu) {        double x = taiQiu.getCenterX();        double y = taiQiu.getCenterY();        double moveRotate = taiQiu.getSpeed();        double angle = taiQiu.getAngle();        double plus = taiQiu.getSpeed();        double ballRotate = taiQiu.getBallRotate();        double cos = Math.abs(Math.cos(Math.PI * angle / 180));        if (angle == 90 || angle == 270) {            cos = 0.0;            moveRotate = plus;        } else {            moveRotate = plus / cos;        }        Font f = new Font("Courier New", Font.CENTER_BASELINE, 7);        GlyphVector v = f.createGlyphVector(getFontMetrics(f).getFontRenderContext(), taiQiu.getBallNumber());        double width = v.getOutline().getBounds().getWidth();        double height = v.getOutline().getBounds().getHeight();        ballRotate = ballRotate + moveRotate;        if (ballRotate >= 40) {            ballRotate = -40;        }        Point2D edge1Ballzd = ballMove(ballRotate, x, y, angle);        Shape textShape = v.getOutline((float) (edge1Ballzd.getX() - width / 2),                (float) (edge1Ballzd.getY() + height / 2));        Point2D corner = new Point2D.Double(edge1Ballzd.getX() - height, edge1Ballzd.getY() - height);        Ellipse2D ballCenterShape = new Ellipse2D.Double();        // 设置圆形的绘制框架（4个参数表示中心点坐标和角点坐标）        ballCenterShape.setFrameFromCenter(edge1Ballzd, corner);        Area ballShape = new Area(ballCenterShape);        ballShape.exclusiveOr(new Area(textShape));        taiQiu.setBallRotate(ballRotate);        return ballShape;    }        private void edgeBall(Graphics2D g2d, Ellipse2D shape,TaiQiu taiQiu) {        double moveRotate = taiQiu.getSpeed();        double angle = taiQiu.getAngle();        double plus = taiQiu.getSpeed();        double edge1Rotate = taiQiu.getEdge1Rotate();        double edge2Rotate = taiQiu.getEdge2Rotate();        double cos = Math.abs(Math.cos(Math.PI * angle / 180));        if (angle == 90 || angle == 270) {            cos = 0.0;            moveRotate = plus;        } else {            moveRotate = plus / cos;        }
         edge1Rotate = edge1Rotate + moveRotate;        if (edge1Rotate >= 40) {            edge1Rotate = -40;        }        Point2D edge1Ball = ballMove(edge1Rotate, shape.getCenterX(), shape.getCenterY(), angle);        edgePaint(g2d, shape, edge1Ball);
         edge2Rotate = edge2Rotate + moveRotate;        if (edge2Rotate >= 40) {            edge2Rotate = -40;        }        Point2D edge2Ball = ballMove(edge2Rotate, shape.getCenterX(), shape.getCenterY(), angle);        edgePaint(g2d, shape, edge2Ball);        taiQiu.setEdge1Rotate(edge1Rotate);        taiQiu.setEdge2Rotate(edge2Rotate);    }        private Point2D ballMove(double rotate,double parentX,double parentY,double angle) {        double cos = Math.abs(Math.cos(Math.PI * angle / 180));        double sin = Math.abs(Math.sin(Math.PI * angle / 180));
        Point2D center2d = new Point2D.Double();        double edge1CenterX = parentX;        double edge1CenterY = parentY;        if (angle <= 90) {            edge1CenterX = edge1CenterX + rotate * cos;            edge1CenterY = edge1CenterY + rotate * sin;        } else if (angle <= 180) {            edge1CenterX = edge1CenterX - rotate * cos;            edge1CenterY = edge1CenterY + rotate * sin;        } else if (angle <= 270) {            edge1CenterX = edge1CenterX - rotate * cos;            edge1CenterY = edge1CenterY - rotate * sin;        } else if (angle <= 360) {            edge1CenterX = edge1CenterX + rotate * cos;            edge1CenterY = edge1CenterY - rotate * sin;        }        center2d.setLocation(edge1CenterX, edge1CenterY);        return center2d;    }        private void edgePaint(Graphics2D g2d,Ellipse2D shape,Point2D edge) {        Area edgeShape = new Area(shape);        Ellipse2D edgeCircle = new Ellipse2D.Double();        edgeCircle.setFrameFromCenter(edge, new Point2D.Double(edge.getX() - 10, edge.getY() - 10));        edgeShape.intersect(new Area(edgeCircle));        g2d.fill(edgeShape);    }    }
        
   

package com.taiqiu.demo;
import java.awt.Color;
public class TaiQiu {
    private double centerX;        private double centerY;        private String ballNumber;        private Color color;        private float progress;        private double angle;        private double ballRotate;        private double edge1Rotate;        private double edge2Rotate;        private double speed;
    /**     * @return centerX     */    public double getCenterX() {        return centerX;    }
    /**     * @param centerX 設定する centerX     */    public void setCenterX(double centerX) {        this.centerX = centerX;    }
    /**     * @return centerY     */    public double getCenterY() {        return centerY;    }
    /**     * @param centerY 設定する centerY     */    public void setCenterY(double centerY) {        this.centerY = centerY;    }
    /**     * @return ballNumber     */    public String getBallNumber() {        return ballNumber;    }
    /**     * @param ballNumber 設定する ballNumber     */    public void setBallNumber(String ballNumber) {        this.ballNumber = ballNumber;    }
    /**     * @return color     */    public Color getColor() {        return color;    }
    /**     * @param color 設定する color     */    public void setColor(Color color) {        this.color = color;    }
    /**     * @return progress     */    public float getProgress() {        return progress;    }
    /**     * @param progress 設定する progress     */    public void setProgress(float progress) {        this.progress = progress;    }
    /**     * @return angle     */    public double getAngle() {        return angle;    }
    /**     * @param angle 設定する angle     */    public void setAngle(double angle) {        this.angle = angle;    }
    /**     * @return ballRotate     */    public double getBallRotate() {        return ballRotate;    }
    /**     * @param ballRotate 設定する ballRotate     */    public void setBallRotate(double ballRotate) {        this.ballRotate = ballRotate;    }
    /**     * @return edge1Rotate     */    public double getEdge1Rotate() {        return edge1Rotate;    }
    /**     * @param edge1Rotate 設定する edge1Rotate     */    public void setEdge1Rotate(double edge1Rotate) {        this.edge1Rotate = edge1Rotate;    }
    /**     * @return edge2Rotate     */    public double getEdge2Rotate() {        return edge2Rotate;    }
    /**     * @param edge2Rotate 設定する edge2Rotate     */    public void setEdge2Rotate(double edge2Rotate) {        this.edge2Rotate = edge2Rotate;    }
    /**     * @return speed     */    public double getSpeed() {        return speed;    }
    /**     * @param speed 設定する speed     */    public void setSpeed(double speed) {        this.speed = speed;    }        }
    
    
    

package com.taiqiu.demo;
import java.awt.GridBagLayout;
import javax.swing.JFrame;import javax.swing.SwingUtilities;
import com.sun.awt.AWTUtilities;
public class TaiQiuFrame extends JFrame{    /**     *      */    private static final long serialVersionUID = 1L;        private QiuTai ｑiuTai;    public TaiQiuFrame(){        setTitle("卓球");        setLocationRelativeTo(null);        setDefaultCloseOperation(DISPOSE_ON_CLOSE);        setLayout( new GridBagLayout() );        setBounds(500, 200, 400, 500);        //设定禁用窗体装饰，这样就取消了默认的窗体结构        setUndecorated(true);        AWTUtilities.setWindowOpaque(this, false);        PoolCue poolCue = new PoolCue();        poolCue.setAngle(0);        ｑiuTai = new QiuTai(poolCue);        setContentPane(ｑiuTai);        setVisible(true);        setSize(ｑiuTai.getWidth(),ｑiuTai.getHeight());        addKeyListener(new KeyListenerForPoolCue(poolCue));    }    public void repaintJpanel() {        ｑiuTai.repaint();    }        public static void main(String[] args) {        SwingUtilities.invokeLater(new Runnable() {            @Override            public void run() {                new TaiQiuFrame();            }        });    }}



package com.taiqiu.demo;
import java.awt.Point;
public class TaiQiuQiu {
    private boolean upFlg;
    private boolean downFlg;
    private boolean leftMoveFlg;
    private boolean rightMoveFlg;        private int xOribit;        private int yOribit;        private Point point;
    /**     * @return upFlg     */    public boolean isUpFlg() {        return upFlg;    }
    /**     * @param upFlg 設定する upFlg     */    public void setUpFlg(boolean upFlg) {        this.upFlg = upFlg;    }
    /**     * @return downFlg     */    public boolean isDownFlg() {        return downFlg;    }
    /**     * @param downFlg 設定する downFlg     */    public void setDownFlg(boolean downFlg) {        this.downFlg = downFlg;    }
    /**     * @return leftMoveFlg     */    public boolean isLeftMoveFlg() {        return leftMoveFlg;    }
    /**     * @param leftMoveFlg 設定する leftMoveFlg     */    public void setLeftMoveFlg(boolean leftMoveFlg) {        this.leftMoveFlg = leftMoveFlg;    }
    /**     * @return rightMoveFlg     */    public boolean isRightMoveFlg() {        return rightMoveFlg;    }
    /**     * @param rightMoveFlg 設定する rightMoveFlg     */    public void setRightMoveFlg(boolean rightMoveFlg) {        this.rightMoveFlg = rightMoveFlg;    }
    /**     * @return xOribit     */    public int getxOribit() {        return xOribit;    }
    /**     * @param xOribit 設定する xOribit     */    public void setxOribit(int xOribit) {        this.xOribit = xOribit;    }
    /**     * @return yOribit     */    public int getyOribit() {        return yOribit;    }
    /**     * @param yOribit 設定する yOribit     */    public void setyOribit(int yOribit) {        this.yOribit = yOribit;    }
    /**     * @return point     */    public Point getPoint() {        return point;    }
    /**     * @param point 設定する point     */    public void setPoint(Point point) {        this.point = point;    }        }
